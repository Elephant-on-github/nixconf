#!/usr/bin/env sh
# appfzf â€“ fast .desktop launcher (POSIX sh)
# Works even when some expected directories are missing.

set -euo pipefail

# ---------- configuration ----------
cache="${XDG_CACHE_HOME:-$HOME/.cache}/appfzf.cache"

# ---------- portable mtime ----------
mod_time() {
  if stat --version >/dev/null 2>&1; then   # GNU coreutils (Linux)
    stat -c %Y "$1"
  else                                    # macOS/BSD
    stat -f %m "$1"
  fi
}

# ---------- collect existing .desktop directories ----------
paths=(
  /run/current-system/sw/share/applications
  /nix/var/nix/profiles/default/share/applications
  "$HOME/.local/share/applications"
)
for p in /nix/store/*/share/applications; do
  [ -d "$p" ] && paths+=("$p")
done

# Keep only directories that actually exist
valid_paths=()
for d in "${paths[@]}"; do
  [ -d "$d" ] && valid_paths+=("$d")
done

if [ "${#valid_paths[@]}" -eq 0 ]; then
  printf 'Error: No valid application directories found.\n' >&2
  exit 1
fi

# ---------- cache validation ----------
if [ -f "$cache" ]; then
  if grep -q $'\t' "$cache"; then
    newest_src=$(fd --hidden --follow --max-depth 2 \
                     --type f --extension desktop . "${valid_paths[@]}" -0 \
                     -c never -X printf '%T@\n' 2>/dev/null |
                 sort -nr | head -1 || echo 0)
    newest_cache=$(mod_time "$cache")
    [ "$newest_cache" -ge "${newest_src%.*}" ] && use_cache=1
  else
    rm -f "$cache"
  fi
fi

# ---------- generate list ----------
generate_list() {
  fd --hidden --follow --max-depth 2 \
     --type f --extension desktop . "${valid_paths[@]}" -0 |
  xargs -0 -I{} sh -c '
    f="$1"
    name=$(grep -a -m1 "^Name=" "$f")
    exec=$(grep -a -m1 "^Exec=" "$f")
    [ -n "$name" ] && [ -n "$exec" ] || exit 0
    name=${name#Name=}
    exec=${exec#Exec=}
    exec=$(printf "%s" "$exec" | sed -E "s/%[fFuUidDnNickk%]//g" | xargs)
    printf "%s\t%s\n" "$name" "$exec"
  ' sh {}
}

list() {
  if [ "${use_cache-}" = "1" ]; then
    cat "$cache"
  else
    generate_list > "$cache"
    cat "$cache"
  fi
}

# ---------- run fzf ----------
list |
sort -t $'\t' -u -k1,1 |
fzf --with-nth=1 \
    --delimiter=$'\t' \
    --prompt='Launch: ' \
    --preview 'printf "%s\n\n%s\n" "{1}" "{2}"' \
    --height=40% \
    --border |
while IFS=$'\t' read -r _ cmd; do
  [ -n "$cmd" ] && sh -c "$cmd" & disown
done
