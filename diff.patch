diff --git a/LICENSE b/LICENSE
deleted file mode 100644
index 15634b7..0000000
--- a/LICENSE
+++ /dev/null
@@ -1,21 +0,0 @@
-MIT License
-
-Copyright (c) 2025 Elephant
-
-Permission is hereby granted, free of charge, to any person obtaining a copy
-of this software and associated documentation files (the "Software"), to deal
-in the Software without restriction, including without limitation the rights
-to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-copies of the Software, and to permit persons to whom the Software is
-furnished to do so, subject to the following conditions:
-
-The above copyright notice and this permission notice shall be included in all
-copies or substantial portions of the Software.
-
-THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
-SOFTWARE.
diff --git a/flake.lock b/flake.lock
new file mode 100644
index 0000000..1a3f94b
--- /dev/null
+++ b/flake.lock
@@ -0,0 +1,48 @@
+{
+  "nodes": {
+    "home-manager": {
+      "inputs": {
+        "nixpkgs": [
+          "nixpkgs"
+        ]
+      },
+      "locked": {
+        "lastModified": 1761530345,
+        "narHash": "sha256-+9+YCK9Lh6GThkXu/8JTxMFUnImIdZpb8ElUh6/F5Y8=",
+        "owner": "nix-community",
+        "repo": "home-manager",
+        "rev": "bbaeb9f1c29e79bb1653b32c3d73244cdf4bd888",
+        "type": "github"
+      },
+      "original": {
+        "owner": "nix-community",
+        "repo": "home-manager",
+        "type": "github"
+      }
+    },
+    "nixpkgs": {
+      "locked": {
+        "lastModified": 1761373498,
+        "narHash": "sha256-Q/uhWNvd7V7k1H1ZPMy/vkx3F8C13ZcdrKjO7Jv7v0c=",
+        "owner": "nixos",
+        "repo": "nixpkgs",
+        "rev": "6a08e6bb4e46ff7fcbb53d409b253f6bad8a28ce",
+        "type": "github"
+      },
+      "original": {
+        "owner": "nixos",
+        "ref": "nixos-unstable",
+        "repo": "nixpkgs",
+        "type": "github"
+      }
+    },
+    "root": {
+      "inputs": {
+        "home-manager": "home-manager",
+        "nixpkgs": "nixpkgs"
+      }
+    }
+  },
+  "root": "root",
+  "version": 7
+}
diff --git a/flake.nix b/flake.nix
new file mode 100644
index 0000000..c91396a
--- /dev/null
+++ b/flake.nix
@@ -0,0 +1,29 @@
+{
+  description = "Nixos config flake";
+
+  inputs = {
+    nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";
+
+    home-manager = {
+      url = "github:nix-community/home-manager";
+      inputs.nixpkgs.follows = "nixpkgs";
+    };
+  };
+
+  outputs = inputs@{ nixpkgs, home-manager, self, ... }: {
+    nixosConfigurations = {
+      nixos = nixpkgs.lib.nixosSystem {
+        specialArgs = { inherit inputs; };  # Pass inputs here
+        modules = [
+          ./hosts/default/configuration.nix
+          home-manager.nixosModules.home-manager 
+          {
+          	home-manager.useGlobalPkgs = true;
+            home-manager.useUserPackages = true;
+            home-manager.users.eagle = import ./hosts/default/home.nix;	
+          }
+        ];
+      };
+    };
+  };
+}
diff --git a/hosts/default/configuration.nix b/hosts/default/configuration.nix
new file mode 100644
index 0000000..82564fd
--- /dev/null
+++ b/hosts/default/configuration.nix
@@ -0,0 +1,174 @@
+# Edit this configuration file to define what should be installed on
+# your system.  Help is available in the configuration.nix(5) man page
+# and in the NixOS manual (accessible by running ‘nixos-help’).
+
+{ config, pkgs, imputs, lib, ... }:
+
+{
+  imports =
+    [ # Include the results of the hardware scan.
+      ./hardware-configuration.nix
+    ];
+
+  # Bootloader.
+  boot.loader.grub.enable = true;
+  boot.loader.grub.device = "/dev/sda";
+  boot.loader.grub.useOSProber = true;
+
+  networking.hostName = "nixos"; # Define your hostname.
+  # networking.wireless.enable = true;  # Enables wireless support via wpa_supplicant.
+
+  # Configure network proxy if necessary
+  # networking.proxy.default = "http://user:password@proxy:port/";
+  # networking.proxy.noProxy = "127.0.0.1,localhost,internal.domain";
+
+  virtualisation.virtualbox.guest.enable = true;
+
+  # Enable networking
+  networking.networkmanager.enable = true;
+
+  # Set your time zone.
+  time.timeZone = "Europe/London";
+
+  # Select internationalisation properties.
+  i18n.defaultLocale = "en_GB.UTF-8";
+
+  i18n.extraLocaleSettings = {
+    LC_ADDRESS = "en_GB.UTF-8";
+    LC_IDENTIFICATION = "en_GB.UTF-8";
+    LC_MEASUREMENT = "en_GB.UTF-8";
+    LC_MONETARY = "en_GB.UTF-8";
+    LC_NAME = "en_GB.UTF-8";
+    LC_NUMERIC = "en_GB.UTF-8";
+    LC_PAPER = "en_GB.UTF-8";
+    LC_TELEPHONE = "en_GB.UTF-8";
+    LC_TIME = "en_GB.UTF-8";
+  };
+
+  # Enable the X11 windowing system.
+  services.xserver.enable = true;
+
+  # Enable the GNOME Desktop Environment.
+  services.displayManager.gdm.enable = true;
+  services.desktopManager.gnome.enable = true;
+
+  hardware.graphics.enable = true;
+
+  # Configure keymap in X11
+  services.xserver.xkb = {
+    layout = "gb";
+    variant = "";
+  };
+  programs.light.enable = true;
+    
+  # Configure console keymap
+  console.keyMap = "uk";
+
+  # Enable CUPS to print documents.
+  services.printing.enable = true;
+
+  #Bluetooth
+  hardware.bluetooth.enable = true;
+
+  # Enable sound with pipewire.
+  services.pulseaudio.enable = false;
+  security.rtkit.enable = true;
+  services.pipewire = {
+    enable = true;
+    alsa.enable = true;
+    alsa.support32Bit = true;
+    pulse.enable = true;
+    # If you want to use JACK applications, uncomment this
+    #jack.enable = true;
+
+    # use the example session manager (no others are packaged yet so this is enabled by default,
+    # no need to redefine it in your config for now)
+    #media-session.enable = true;
+  };
+
+  # Enable touchpad support (enabled default in most desktopManager).
+  # services.xserver.libinput.enable = true;
+
+  # Define a user account. Don't forget to set a password with ‘passwd’.
+  users.users.eagle = {
+    isNormalUser = true;
+    description = "eagle";
+    extraGroups = [ "networkmanager" "wheel" "video" ];
+    packages = with pkgs; [
+    #  thunderbird
+    ];
+  };
+
+  fonts.packages = with pkgs; [
+    noto-fonts
+    noto-fonts-cjk-sans
+    noto-fonts-emoji
+    liberation_ttf
+    fira-code
+    fira-code-symbols
+    mplus-outline-fonts.githubRelease
+    dina-font
+    proggyfonts
+    jetbrains-mono
+    nerd-fonts.jetbrains-mono
+  ];
+  
+  # Enable automatic login for the user.
+  #services.displayManager.autoLogin.enable = true;
+  #services.displayManager.autoLogin.user = "eagle";
+
+  # Workaround for GNOME autologin: https://github.com/NixOS/nixpkgs/issues/103746#issuecomment-945091229
+  systemd.services."getty@tty1".enable = false;
+  systemd.services."autovt@tty1".enable = false;
+
+  # Install firefox.
+  programs.firefox.enable = false;
+
+  # Allow unfree packages
+  nixpkgs.config.allowUnfree = true;
+
+  # List packages installed in system profile. To search, run:
+  # $ nix search wget
+  environment.systemPackages = with pkgs; [
+  #  vim # Do not forget to add an editor to edit configuration.nix! The Nano editor is also installed by default.
+  micro
+  btop
+  zoxide
+  home-manager
+  #  wget
+  ];
+
+  programs.zsh.enable = true;
+  users.defaultUserShell = pkgs.zsh;
+
+  #flakes
+  nix.settings.experimental-features = ["nix-command" "flakes"];
+  
+  # Some programs need SUID wrappers, can be configured further or are
+  # started in user sessions.
+  # programs.mtr.enable = true;
+  # programs.gnupg.agent = {
+  #   enable = true;
+  #   enableSSHSupport = true;
+  # };
+
+  # List services that you want to enable:
+
+  # Enable the OpenSSH daemon.
+  # services.openssh.enable = true;
+
+  # Open ports in the firewall.
+  # networking.firewall.allowedTCPPorts = [ ... ];
+  # networking.firewall.allowedUDPPorts = [ ... ];
+  # Or disable the firewall altogether.
+  # networking.firewall.enable = false;
+
+  # This value determines the NixOS release from which the default
+  # settings for stateful data, like file locations and database versions
+  # on your system were taken. It‘s perfectly fine and recommended to leave
+  # this value at the release version of the first install of this system.
+  # Before changing this value read the documentation for this option
+  # (e.g. man configuration.nix or on https://nixos.org/nixos/options.html).
+  system.stateVersion = "25.05"; # Did you read the comment?
+
+}
diff --git a/hosts/default/hardware-configuration.nix b/hosts/default/hardware-configuration.nix
new file mode 100644
index 0000000..665dce7
--- /dev/null
+++ b/hosts/default/hardware-configuration.nix
@@ -0,0 +1,32 @@
+# Do not modify this file!  It was generated by ‘nixos-generate-config’
+# and may be overwritten by future invocations.  Please make changes
+# to /etc/nixos/configuration.nix instead.
+{ config, lib, pkgs, modulesPath, ... }:
+
+{
+  imports = [ ];
+
+  boot.initrd.availableKernelModules = [ "ata_piix" "ohci_pci" "ehci_pci" "ahci" "sd_mod" "sr_mod" ];
+  boot.initrd.kernelModules = [ ];
+  boot.kernelModules = [ ];
+  boot.extraModulePackages = [ ];
+
+  fileSystems."/" =
+    { device = "/dev/disk/by-uuid/c5198837-a6e9-4ee0-a590-fae7df235257";
+      fsType = "ext4";
+    };
+
+  swapDevices =
+    [ { device = "/dev/disk/by-uuid/5fad6228-ed89-4aa2-8046-97a729ea0e96"; }
+    ];
+
+  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
+  # (the default) this is the recommended approach. When using systemd-networkd it's
+  # still possible to use this option, but it's recommended to use it in conjunction
+  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
+  networking.useDHCP = lib.mkDefault true;
+  # networking.interfaces.enp0s3.useDHCP = lib.mkDefault true;
+
+  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
+  virtualisation.virtualbox.guest.enable = true;
+}
diff --git a/hosts/default/home.nix b/hosts/default/home.nix
new file mode 100644
index 0000000..99b6a55
--- /dev/null
+++ b/hosts/default/home.nix
@@ -0,0 +1,191 @@
+{ config, pkgs, ... }:
+
+{
+  # Home Manager needs a bit of information about you and the paths it should
+  # manage.
+  home.username = "eagle";
+  home.homeDirectory = "/home/eagle";
+
+  # This value determines the Home Manager release that your configuration is
+  # compatible with. This helps avoid breakage when a new Home Manager release
+  # introduces backwards incompatible changes.
+  #
+  # You should not change this value, even if you update Home Manager. If you do
+  # want to update the value, then make sure to first check the Home Manager
+  # release notes.
+  home.stateVersion = "25.05"; # Please read the comment before changing.
+
+  # The home.packages option allows you to install Nix packages into your
+  # environment.
+  home.packages = [
+    # # Adds the 'hello' command to your environment. It prints a friendly
+    # # "Hello, world!" when run.
+    pkgs.hello
+	pkgs.fastfetchMinimal
+	pkgs.bat
+	pkgs.nixfmt-tree
+	pkgs.swaybg
+	pkgs.ripgrep
+	pkgs.fzf
+
+	pkgs.gnomeExtensions.vitals
+	
+    # # It is sometimes useful to fine-tune packages, for example, by applying
+    # # overrides. You can do that directly here, just don't forget the
+    # # parentheses. Maybe you want to install Nerd Fonts with a limited number of
+    # # fonts?
+    # (pkgs.nerdfonts.override { fonts = [ "FantasqueSansMono" ]; })
+
+    # # You can also create simple shell scripts directly inside your
+    # # configuration. For example, this adds a command 'my-hello' to your
+    # # environment:
+    # (pkgs.writeShellScriptBin "my-hello" ''
+    #   echo "Hello, ${config.home.username}!"
+    # '')
+  ];
+  
+  # Home Manager is pretty good at managing dotfiles. The primary way to manage
+  # plain files is through 'home.file'.
+  home.file = {
+    # # Building this configuration will create a copy of 'dotfiles/screenrc' in
+    # # the Nix store. Activating the configuration will then make '~/.screenrc' a
+    # # symlink to the Nix store copy.
+    # ".screenrc".source = dotfiles/screenrc;
+
+    # # You can also set the file content immediately.
+    # ".gradle/gradle.properties".text = ''
+    #   org.gradle.console=verbose
+    #   org.gradle.daemon.idletimeout=3600000
+    # '';
+  };
+  programs.wezterm = {
+  	enable = true;
+  	extraConfig = "
+    -- Pull in the wezterm API
+    local wezterm = require('wezterm')
+    
+    -- This will hold the configuration.
+    local config = wezterm.config_builder()
+    
+    -- This is where you actually apply your config choices
+    
+    -- my coolnight colorscheme
+    config.color_scheme = 's3r0 modified (terminal.sexy)'
+    -- config.color_scheme = 'SeaShells'
+    
+    config.font = wezterm.font('JetBrainsMono Nerd Font Mono')
+    config.font_size = 12
+    
+    config.default_prog = { 'zsh' }
+    
+     config.window_background_opacity = 0.975
+    
+    config.enable_scroll_bar = true
+    
+    config.window_frame = {
+      -- The font used in the tab bar.
+      -- Roboto Bold is the default; this font is bundled
+      -- with wezterm.
+      -- Whatever font is selected here, it will have the
+      -- main font setting appended to it to pick up any
+      -- fallback fonts you may have used there.
+      font = wezterm.font { family = 'Roboto', weight = 'Bold' },
+    
+      -- The size of the font in the tab bar.
+      -- Default to 10.0 on Windows but 12.0 on other systems
+      font_size = 12.0,
+    
+      -- The overall background color of the tab bar when
+      -- the window is focused
+      active_titlebar_bg = '#333333',
+    
+      -- The overall background color of the tab bar when
+      -- the window is not focused
+      inactive_titlebar_bg = '#333333',
+    }
+    
+    config.colors = {
+      tab_bar = {
+        -- The color of the inactive tab bar edge/divider
+        inactive_tab_edge = '#575757',
+      },
+    }
+    
+    -- and finally, return the configuration to wezterm
+    return config
+    
+  	";
+  };
+  
+  programs.zoxide.enable = true;
+  programs.zsh =  {
+    enable = true;
+	enableCompletion = true;
+	autosuggestion.enable = true;
+	syntaxHighlighting.enable = true;
+ 	shellAliases = {
+	   ll = "ls -l";
+	   update = "sudo nixos-rebuild switch";
+	   cat = "bat";
+	};
+	history.size = 10000;
+	oh-my-zsh = {
+		enable = true;
+		plugins = ["git"];
+		theme = "eastwood";
+	};
+  };
+
+  
+  home.shell.enableShellIntegration = true;
+
+  #Gnome Extensions
+  dconf = {
+    enable = true;
+    settings = {
+    	"org/gnome/shell" = {
+    	  disable-user-extensions = false;
+    	  disabled-extensions = "disabled";
+    	  enabled-extensions = [
+			"Vitals@CoreCoding.com"
+    	  ];
+    	};
+    	"org/gnome/shell/extensions/vitals" = {
+    		  hot-sensors = ["_processor_usage_" "_memory_usage_"];
+    		  position-in-panel = 2;
+    		  use-higher-precision = false;
+    		  alphabetize = true;
+    		  hide-zeros = false;
+    		  show-voltage = false;
+    		  show-network = false;
+    		  show-storage = false;
+    		  show-battery = false;
+    		  menu-centered = true;
+    		  icon-style = 1;
+    		  
+    		  
+    	};
+    	"org/gnome/settings-daemon/plugins/media-keys" = {
+    	  next = [ "<Shift><Control>n" ];
+    	  previous = [ "<Shift><Control>p" ];
+    	  play = [ "<Shift><Control>space" ];
+    	  custom-keybindings = [
+    	    "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/"
+    	   ];
+    	};
+    	"org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0" = {
+    		  name = "Wezterm";
+    		  command = "wezterm";
+    		  binding = "<Super>Return";
+    	};
+    };
+  };
+  
+  home.sessionVariables = {
+    EDITOR = "micro";
+	GSK_RENDERER = "cairo";
+  };
+
+  # Let Home Manager install and manage itself.
+  programs.home-manager.enable = true;
+}
